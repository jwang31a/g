TNPG: Benjamin (Jun Hong Wang, Brian Wang, Nicole Zhou)
APCS pd6
Lab06: Read/Review/Expand
2022-02-10
Time spent: 1 hrs

Activity 1:
1a) public static double sentimentVal( String word )
b) yes, it requires a parameter, and if the wrong parameter is inputted, it will have a runtime error.
c) yes, it has a return value, it returns a double

2)
great      1.48
lazy      -1.38
horrific  -2.83

3a) yes, since the input is a string
b) no, since the input is a floating point number
c) no, since it inputs 2 parameters instead of one

Activity 2:
1) wrote totalSentiment(String fileName) method

2) called method, tested using Review1.txt, which had an expected value of -2.92, and returned -2.92

3) created starRating(String fileName) using totalSentiment method we wrote previously

4) totalSentiment uses the sentimentVal method that's given to us.
However, sentimentVal can't work with a whole review, so we have to split the review up into an ArrayList (or array, but we opted for an ArrayList) of Strings, that are individual words.
We use indexOf to determine where the words begin and end, and we put them into a words variable, which then get added into the ArrayList.
Before the words get added to the AL, we remove the punctuation, then we make it all lowercase, so that when it's used for sentimentVal, the word matches exactly (just to foolproof our program)
After we split the review up, we iterate through the AL, using sentimentVal on all of them, and adding them up into one variable, which is then outputted.

5a) The rating for the first review makes sense, since the review is very negative, and a 2 star is about right.
The second review was supposed to be the good review, but the totalSentiment seemed too low, and the star rating was only 3.
This is probably because some words aren't included in the positive adjectives list, but also some words that are used in the review might have a negative connotation even if they are being used positively.
The way we did the starRating method might also affect the star rating, since we chose somewhat arbitrary numbers.

b) One way is to add more words to the positive and negative adjectives list, with more values associated with them.
Another way would probably be to review the words already included, so that we can change the values around to more accurate values.

6a) I don't know what the logical error is called, but in the order of the if and else if statements matter.
If the totalSentiment is 0, for example, it should return 0, but it instead returns 4, since the first if statement will be true.
All values less than 15 will return 4, simply because the first if statement is evaluated to true.

b) This problem could be fixed by switching the order of the boolean expressions, with the totalSentiment < 0 in the first if statement, then < 5 in the next, then < 10, then < 15.
This is so that the order of the boolean expressions is correct, and the intended star rating is returned.

Activity 3:
1) added 10 words to each of them, with a star at the end

2) added stars to review

3) indexOf will find the index of a specific input.
for example, if we want to find the first occurrence of the letter e in a string, we can use indexOf("e"), and it will return the position of the first e.
substring allows us to split a string up.
These two methods are important for us to use because we can find where a space is, and divide the string by using substring.
We have to add 1 to the position of the space while copying the remainder of the string because the substring method that we use requires 2 inputs: a beginning,
which is inclusive, and an ending, which is exclusive.
This can be tested by doing substring(0,0), and (0,1),

4) wrote method

5) static methods are members of the class, and non-static methods are members of an instance
an instance means it's a thing that has all the attributes and methods of that class, but editing one instance will not change another instance

6) we could add another parameter to the method, a boolean, and depending on what the boolean is, true or false, we can add positive or negative adjectives to the review

Activity 4:
1) Someone might want to make a place look worse than it actually is, and to make the ratings go down, will autogenerate a negative review.

2) On the other hand, the owner of the business might want to make the business look better than it actually is, and might generate positive reviews.

3) The best way to maintain variety in a review while also strengthening the position of the review would be to replace all out of line adjectives with those that support the point of view.
   For example, a good review will have all negative adjectives, if any, changed to good.
   A bad review will have all positive adjectives, if any, changed to bad.

5) oneWord will consist of the original contents of oneWord from the second letter on (Only the first letter will be cut).

6) The code will only be able to find the corresponding adjective in the list of sentimental values if the words are exactly the same. The * will make the two words different.

7) Instead of only replacing bad adjectives in a good review, we could replace ALL adjectives in a review with stronger adjectives.
   For example, we could replace all adjectives with a sentimental value of under 3 to adjectives with sentimental values over 3. That would create an overwhelmingly postive review.

Activity 5:
1) We thought this program would be simple to implement, while still meeting all the requirements.
It uses iteration, String methods, and conditional statements, while managing to be simple.

2) We started off with a main method, and incrementally developed the screamify method.
At first, we had a helper method, findPunc(String input) to find the index of punctuation, but we removed it, and put it inside the screamify method.
Then, we realized that we didn't need an output method, since we could just edit the input string itself, and return it.
We then implemented the conditionals and loops, so that end punctuation would be found, then changed to exclamation marks.

3) public static String screamify(String input)
This method isn't a member of an instance, and there are no instance variables that we are working with, so we made it static.
The one parameter it needs is a string to screamify.
We also return a string, since the method modifies the string.

4)
while(input.indexOf(".") != -1){
  int nextPunc = input.indexOf(".");
  if(nextPunc != input.length() - 1){
    input = input.substring(0, nextPunc) + "!" + input.substring(nextPunc + 1);
  }
  else{
    input = input.substring(0, nextPunc) + "!";
  }
}

indexOf(".") locates the next index or location of a period, and if it isn't -1, that means there is still another period in the input string.
While that is true, we can use substring to replace the parts of the input that we don't need, which is end punctuation.
substring returns a string, with all the characters from one position to another, or the characters from one position onwards.

5) code shown above
for (int i = 0; i < input.length(); i++) {
  String nextChar = new String();
  nextChar = input.substring(i, i + 1);
  if (nextChar.equals(".") ||
  nextChar.equals("?")) {
    input = input.substring(0, i) + "!" + input.substring(i + 1);
  }
}
this segment commented out in Scream.java

6) code shown in number 4
it does work repeatedly, only if there is more of a specific type of punctuation.
equivalent code segment shown in question 5
